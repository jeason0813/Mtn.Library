// from codeproject
// http://www.codeproject.com/Tips/656583/Walkthrough-How-to-increment-AssemblyFileVersion
//
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
	var assemblyVersion="4.0.0.0";
	var fileVersion="4.0.0.0"; 
	var pattern = new Regex(@"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+");
 
	ReadFromAssemblyInfoAndOptionallyDelete(ref assemblyVersion,ref fileVersion, pattern, "AssemblyFileVersion.cs", false);
	ReadFromAssemblyInfoAndOptionallyDelete(ref assemblyVersion,ref fileVersion, pattern, "Properties\\AssemblyInfo.cs", true);
	
	assemblyVersion=IncreaseRevision(assemblyVersion);
	fileVersion=IncreaseRevision(fileVersion);
	ReadFromAssemblyInfoAndOptionallyDelete(ref assemblyVersion,ref fileVersion, pattern, "..\\..\\..\\..\\Version.txt", true, true);
	
#>
using System.Reflection;
[assembly: AssemblyVersion("<#= assemblyVersion #>")] 
[assembly: AssemblyFileVersion("<#= fileVersion #>")] 
 
<#+

    static string IncreaseRevision(string version)
        {
            var tokens = version.Split('.');
            var lastIndex = tokens.Length - 1;
            var revision = int.Parse(tokens[lastIndex]);
            tokens[lastIndex] = (++revision).ToString();
            return string.Join(".", tokens);
        }	  		
#>


<#+
       void ReadFromAssemblyInfoAndOptionallyDelete(ref string assemblyVersion,ref string fileVersion, Regex pattern, string path, bool delete, bool onlyVersion=false)
        {    
            const string assembVersionToken = "[assembly: AssemblyVersion";
            const string fileVersionToken = "[assembly: AssemblyFileVersion";
			var shouldUpdate=false;
			 
			try
			{
				path=Host.ResolvePath(path);
			} 
			catch
			{
				return; 
			}
            var lines = new StringBuilder();

           if (onlyVersion)
           {
               lines.AppendFormat("FileVersion:{0} - AssemblyVersion:{1}",fileVersion,assemblyVersion);
               shouldUpdate = true;
           }
           else
           {
               using (var stream = File.OpenRead(path))
               {
                   var reader = new StreamReader(stream);
                   while (!reader.EndOfStream)
                   {
                       var line = reader.ReadLine();

                       if (line.Contains(assembVersionToken))
                       {
                           assemblyVersion = pattern.Match(line).ToString();
                           shouldUpdate = true;
                       }
                       else if (line.Contains(fileVersionToken))
                       {
                           fileVersion = pattern.Match(line).ToString();
                           shouldUpdate = true;
                       }
                       else
                       {
                           lines.AppendLine(line);
                       }
                   }
               }
           }

           if(shouldUpdate && delete)
			{  
				 File.WriteAllText(path, lines.ToString());
			}
        }
#>